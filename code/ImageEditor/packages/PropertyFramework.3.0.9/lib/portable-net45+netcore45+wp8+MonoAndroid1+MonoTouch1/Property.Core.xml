<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Property.Core</name>
    </assembly>
    <members>
        <member name="M:Property.ICallPropertyPrototype`1.Create(`0)">
            <summary>
            Create a new instance of the property.
            </summary>
            <param name="defaultValue">Tell me what initial Value the instance should have.</param>
        </member>
        <member name="M:Property.IInputPropertyPrototype`1.Create(`0)">
            <summary>
            Create a new instance of the property.
            </summary>
            <param name="defaultValue">Tell me what initial Value the instance should have.</param>
        </member>
        <member name="M:Property.IPropertyPrototype`1.Create(`0)">
            <summary>
            Create a new instance of the property.
            </summary>
            <param name="defaultValue">Tell me what initial Value the instance should have.</param>
        </member>
        <member name="M:Property.IReloaderPrototype`1.Create(System.Func{`0},System.Action{`0},System.Action{System.Boolean})">
            <summary>
            Create a new instance of the property reloader.
            </summary>
            <param name="getValue">Tell me how to get new values for the property.</param>
            <param name="applyValue">Tell me how to set the property's Value.</param>
            <param name="applyStatus">Tell me how to set the property's IsLoading status.</param>
        </member>
        <member name="T:Property.ICallDriven">
            <summary>
            Supports one-method operation control.
            </summary>
        </member>
        <member name="M:Property.ICallDriven.Go">
            <summary>
            Trigger operation.
            </summary>
        </member>
        <member name="T:Property.IInput`1">
            <summary>
            Supports setter-based input.
            </summary>
            <typeparam name="T">Type of input.</typeparam>
        </member>
        <member name="P:Property.IInput`1.Input">
            <summary>
            Settable input.
            </summary>
        </member>
        <member name="T:Property.PropertyIsChangingEventArgs">
            <summary>
                <para>Provides data for the <see langword="PropertyChanging">
            event.</see></para>
            </summary>
        </member>
        <member name="T:Property.INotifyPropertyIsChanging">
            <summary>
            Defines an event for notifying clients that a property value is changing.
            </summary>
        </member>
        <member name="E:Property.INotifyPropertyIsChanging.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="T:Property.IOutput`1">
            <summary>
            Supports getter-based output.
            </summary>
            <typeparam name="T">Type of output.</typeparam>
        </member>
        <member name="P:Property.IOutput`1.Value">
            <summary>
            Current state of the output.
            </summary>
        </member>
        <member name="P:Property.IOutput`1.DebugValue">
            <summary>
            Side-effects-free current state of the output.
            </summary>
        </member>
        <member name="P:Property.IOutput`1.IsLoading">
            <summary>
            Indicates whether the output value is currently being updated.
            </summary>
        </member>
        <member name="T:Property.IValidatable">
            <summary>
            Supports triggering validation.
            </summary>
        </member>
        <member name="M:Property.IValidatable.Validate">
            <summary>
            Triggers execution of the implementer's
            validation mechanism.
            </summary>
        </member>
        <member name="T:Property.ListExtensions">
            <summary>
            Contains List extensions missing from portable .Net
            </summary>
        </member>
        <member name="M:Property.ListExtensions.ApplyAction``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            Analog of List.ForEach(..)
            </summary>
        </member>
        <member name="T:Property.Reloadable`1">
            <summary>
            The described property of type T ...
            </summary>
            <typeparam name="T">Desired property type.</typeparam>
        </member>
        <member name="M:Property.Reloadable`1.On">
            <summary>
            ... will reload ...
            </summary>
        </member>
        <member name="T:Property.ReloadableExtensionsCore">
            <summary>
            Contains words that can come immediately after the opening
            of a property description.
            </summary>
        </member>
        <member name="M:Property.ReloadableExtensionsCore.Each``1(Property.Reloadable{``0})">
            <summary>
            ... synchronously (each time) ...
            </summary>
        </member>
        <member name="M:Property.ReloadableExtensionsCore.Conditional``1(Property.Reloadable{``0},System.Func{System.Boolean})">
            <summary>
            ... synchronously if the specified condition is met (when) ...
            </summary>
            <param name="condition">Tell me how to decide if the reload should happen.</param>
        </member>
        <member name="M:Property.ReloadableExtensionsCore.Conditional``2(Property.Reloadable{``0},System.Func{``1,``1},System.Func{``1,System.Boolean})">
            <summary>
            ... synchronously if the discriminator state meets the specified condition (when) ...
            </summary>
            <param name="getState">Tell me how the state should be produced
            based on its previous value.</param>
            <param name="condition">Tell me how to use the state to decide if
            the reload should happen.</param>
        </member>
        <member name="M:Property.ReloadableExtensionsCore.First``1(Property.Reloadable{``0})">
            <summary>
            ... synchronously first time ...
            </summary>
        </member>
        <member name="M:Property.ReloadableExtensionsCore.Odd``1(Property.Reloadable{``0})">
            <summary>
            ... synchronously every odd time ...
            </summary>
        </member>
        <member name="T:Property.ReloaderPrototypeExtensionsCore">
            <summary>
            Contains words that extend the description
            of a property's reload process.
            </summary>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.Conditional``1(Property.IReloaderPrototype{``0},System.Func{System.Boolean})">
            <summary>
            ... (if) the specified condition is met (when) ...
            </summary>
            <param name="condition">Tell me how to decide if the reload should happen.</param>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.Conditional``2(Property.IReloaderPrototype{``0},System.Func{``1,``1},System.Func{``1,System.Boolean})">
            <summary>
            ... (if) the internally stored state meets the specified condition (when) ...
            </summary>
            <param name="getState">Tell me how the state should be produced
            based on its previous value.</param>
            <param name="condition">Tell me how to use the state to decide if
            the reload should happen.</param>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.First``1(Property.IReloaderPrototype{``0})">
            <summary>
            ... first time ...
            </summary>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.Odd``1(Property.IReloaderPrototype{``0})">
            <summary>
            ... every odd time ...
            </summary>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.Get``1(Property.IReloaderPrototype{``0},System.Func{``0,``0})">
            <summary>
                <para>... the user tries to get the property's Value.</para>
                <para>A new property value will be produced using the specified function.</para>
            </summary>
            <param name="getValue">Tell me how to use the current value of the property
            to produce its new one.</param>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.Input``1(Property.IReloaderPrototype{``0})">
            <summary>
                <para>... the user sets the property's Input.</para>
                <para>A new property value will be read from Input.</para>
            </summary>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.Call``1(Property.IReloaderPrototype{``0},System.Func{``0,``0})">
            <summary>
                <para>... the user calls the property's Go() method.</para>
                <para>A new property value will be produced using the specified function.</para>
            </summary>
            <param name="getValue">Tell me how to use the current value of the property
            to produce its new one.</param>
        </member>
        <member name="M:Property.ReloaderPrototypeExtensionsCore.CallGet``1(Property.IReloaderPrototype{``0},System.Func{``0,``0})">
            <summary>
                <para>... the user tries to get the property's Value or calls its Go method.</para>
                <para>A new property value will be produced using the specified function.</para>
            </summary>
            <param name="getValue">Tell me how to use the current value of the property
            to produce its new one.</param>
        </member>
        <member name="T:Property.StringsCore">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Property.StringsCore.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Property.StringsCore.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Property.StringsCore.CANT_OBTAIN_RELOADER">
            <summary>
            Looks up a localized string similar to Instance creation method of a reloader prototype returned null. Prototypes that return null values are not supported..
            </summary>
        </member>
    </members>
</doc>
